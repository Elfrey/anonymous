{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/flags.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/notification.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///./src/token.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/actor.ts","webpack:///./src/utils.ts","webpack:///../../../../foundryVTT-projects/@utils/string.ts","webpack:///./src/api.ts","webpack:///../../../../foundryVTT-projects/@utils/jquery.ts","webpack:///./src/third/dnd5e.ts","webpack:///./src/third/pf2e.ts","webpack:///./src/third/wire.ts","webpack:///./src/third.ts","webpack:///./src/actor.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/context.ts","webpack:///./src/apps/names.ts","webpack:///./src/main.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/user.ts","webpack:///./src/tracker.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/combatant.ts","webpack:///./src/chat.ts"],"sourcesContent":["export let MODULE_ID = ''\r\nexport let TYPE = 'module'\r\n\r\nexport function setModuleID(id: string, isSystem = false) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n    TYPE = isSystem ? 'system' : 'module'\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\ntype OwnModule = 'anonymous' | 'idleuh' | 'pf2e-hero-actions' | 'pf2e-dailies'\r\n\r\ntype ReturnedModule<TApi extends ModuleApi = ModuleApi> = Module<TApi> | undefined\r\ntype ReturnedModuleApi<TApi extends Record<string, any>> = Module<TApi>['api'] | undefined\r\n\r\nexport function getModule<T extends ModuleApi = ModuleApi>(id: string | OwnModule) {\r\n    return game.modules.get(id) as ReturnedModule<T>\r\n}\r\n\r\nexport function getCurrentModule<TApi extends ModuleApi = ModuleApi>() {\r\n    return getModule(MODULE_ID) as Module<TApi>\r\n}\r\n\r\nexport function getModuleApi<TApi extends Record<string, any>>(id: string | OwnModule) {\r\n    return getModule<TApi>(id)?.api as ReturnedModuleApi<TApi>\r\n}\r\n","import { MODULE_ID, TYPE } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `${TYPE}s/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `${TYPE}s/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<TChoices extends Record<string, unknown> | undefined>(\r\n    options: Omit<SettingRegistration<TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown>; name: string }\r\n) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register<TChoices>(MODULE_ID, name, options as SettingRegistration<TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function hasModuleFlag(doc: FoundryDocument) {\r\n    return getProperty(doc, `flags.${MODULE_ID}`) !== undefined\r\n}\r\n\r\nexport function flagPath(key: string) {\r\n    return `flags.${MODULE_ID}.key`\r\n}\r\n\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string): T | undefined\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string, fallback: T): T\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string, fallback?: T): T | undefined {\r\n    return (doc.getFlag(MODULE_ID, key) as T | undefined) ?? fallback\r\n}\r\n\r\n/**\r\n * @template {foundry.Document} T\r\n * @param {T} doc\r\n * @param {string} key\r\n * @param {any} value\r\n * @returns T\r\n */\r\nexport function setFlag(doc: FoundryDocument, key: string, value: unknown) {\r\n    return doc.setFlag(MODULE_ID, key, value)\r\n}\r\n\r\nexport function getSourceId(doc: ClientDocumentMixin) {\r\n    return doc.getFlag<ItemUUID>('core', 'sourceId')\r\n}\r\n\r\nexport function hasSourceId(doc: ClientDocumentMixin, sourceId: DocumentUUID) {\r\n    return getSourceId(doc) === sourceId\r\n}\r\n\r\nexport function includesSourceId(doc: ClientDocumentMixin, list: DocumentUUID[]) {\r\n    const sourceId = getSourceId(doc)\r\n    return sourceId ? list.includes(sourceId) : false\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\n\r\nexport type NotifyArgs = [str: string, arg1?: boolean | Record<string, string | number | boolean>, arg2?: boolean]\r\n\r\nfunction notify(\r\n    str: string,\r\n    arg1?: 'warning' | 'info' | 'error' | boolean | Record<string, string | number | boolean>,\r\n    arg2?: boolean | Record<string, string | number | boolean>,\r\n    arg3?: boolean\r\n) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number | boolean>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function localizeTemplate(key: string, { hash }: { hash: Record<string, string> }) {\r\n    return localize(`${key}`, hash)\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: (key: string) => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        template: {\r\n            value: (key: string, { hash }: { hash: Record<string, string> }) => fn(key, hash),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n        path: (key: string) => string\r\n        template: (key: string, options: { hash: Record<string, string> }) => string\r\n    }\r\n}\r\n","import { getActorTokens } from '@utils/foundry/actor'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { getSetting } from '@utils/foundry/settings'\r\nimport { playersSeeName, toggleSeeName } from './api'\r\n\r\nexport function updateActorTokens(actor: Actor, showName: boolean) {\r\n    if (actor.token) changeDisplayName(actor.token, showName)\r\n    else getActorTokens(actor, true).forEach(x => changeDisplayName(x, showName))\r\n}\r\n\r\nfunction changeDisplayName(token: TokenDocument, showName: boolean) {\r\n    if (showName) showTokenName(token)\r\n    else hideTokenName(token)\r\n}\r\n\r\nfunction isHidding(displayName: TokenDisplayMode) {\r\n    return !isShowing(displayName)\r\n}\r\n\r\nfunction isShowing(displayName: TokenDisplayMode) {\r\n    return displayName === CONST.TOKEN_DISPLAY_MODES.HOVER || displayName === CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n}\r\n\r\nfunction swapToHide(displayName: TokenDisplayMode) {\r\n    if (displayName === CONST.TOKEN_DISPLAY_MODES.HOVER) return CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER\r\n    if (displayName === CONST.TOKEN_DISPLAY_MODES.ALWAYS) return CONST.TOKEN_DISPLAY_MODES.OWNER\r\n    return displayName\r\n}\r\n\r\nfunction hideTokenName(token: TokenDocument) {\r\n    const displayName = token.displayName\r\n    if (isHidding(displayName)) return\r\n    const swap = swapToHide(displayName)\r\n    token.update({ displayName: swap })\r\n}\r\n\r\nfunction showTokenName(token: TokenDocument) {\r\n    const displayName = token.displayName\r\n    if (isShowing(displayName) || !getSetting('token')) return\r\n\r\n    let swap = displayName\r\n    if (swap === CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER) swap = CONST.TOKEN_DISPLAY_MODES.HOVER\r\n    else if (swap === CONST.TOKEN_DISPLAY_MODES.OWNER) swap = CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n\r\n    token.update({ displayName: swap })\r\n}\r\n\r\nexport function renderTokenHUD(hud: TokenHUD, html: JQuery) {\r\n    const actor = hud.object.actor\r\n    if (!actor || actor.hasPlayerOwner) return\r\n\r\n    const toggle = createToggle(actor)\r\n    toggle.addEventListener('click', () => toggleSeeName(actor))\r\n    html.find('.col.right').append(toggle)\r\n}\r\n\r\nfunction createToggle(actor: Actor) {\r\n    const tmp = document.createElement('template')\r\n    const toggled = playersSeeName(actor)\r\n\r\n    tmp.innerHTML = `<div class=\"control-icon${toggled ? ' active' : ''}\" data-action=\"anonymous-toggle\">\r\n    <i class=\"fa-solid fa-signature\" title=\"${localize('hud.title')}\"></i>\r\n</div>`\r\n\r\n    return tmp.content.firstChild as HTMLDivElement\r\n}\r\n\r\nexport function preCreateToken(token: TokenDocument) {\r\n    if (token.actor?.hasPlayerOwner) return\r\n    const displayName = token.displayName\r\n    const swap = swapToHide(displayName)\r\n    if (swap !== displayName) token._source.displayName = swap\r\n}\r\n","export function getCharacterOwner(actor: Actor, connected = false) {\r\n    if (connected) return game.users.find(x => x.active && x.character === actor)\r\n    return game.users.find(x => x.character === actor)\r\n}\r\n\r\nexport function getActorTokens(actor: Actor, linkedOnly = false) {\r\n    return game.scenes.map(scene => getActorSceneTokens(scene, actor, linkedOnly)).flat()\r\n}\r\n\r\nexport function getActorSceneTokens(scene: Scene, actor: Actor, linkedOnly = false) {\r\n    return scene.tokens.filter(token => token.actorId === actor.id && (!linkedOnly || token.actorLink))\r\n}\r\n","import { getSetting } from '@utils/foundry/settings'\r\nimport { capitalize } from '@utils/string'\r\n\r\nexport function refresh() {\r\n    ui.combat.render()\r\n}\r\n\r\nexport function getSavedNames() {\r\n    return getSetting('names') as Record<string, string>\r\n}\r\n\r\nexport function formatUnknown(unknown: string, type: string) {\r\n    return `${unknown} ${capitalize(type)}`\r\n}\r\n","export function cleanSplit(str: string | undefined) {\r\n    if (!str) return []\r\n    return str\r\n        .split(',')\r\n        .map(x => x.trim())\r\n        .filter(x => x)\r\n}\r\n\r\nexport function capitalize(str?: string) {\r\n    if (!str) return ''\r\n    return str[0].toUpperCase() + str.slice(1)\r\n}\r\n","import { getFlag, setFlag } from '@utils/foundry/flags'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { updateActorTokens } from './token'\r\nimport { formatUnknown, getSavedNames } from './utils'\r\n\r\n/**\r\n * @param {Actor | Combatant} doc\r\n * @returns {boolean} the current state of visibility\r\n */\r\nexport function playersSeeName(doc: Actor | Combatant): boolean {\r\n    if (doc instanceof Combatant && doc.actor) doc = doc.actor\r\n    if (doc instanceof Actor && doc.hasPlayerOwner) return true\r\n    return !!getFlag(doc, 'showName')\r\n}\r\n\r\n/**\r\n * Toggles the state of visibility\r\n * This will trigger a refresh of different parts of the UI to reflect the new state\r\n *\r\n * @param {Actor | Combatant} doc\r\n * @returns {Promise<boolean>} a promise with the new state of visibility\r\n */\r\nexport async function toggleSeeName(doc: Actor | Combatant): Promise<boolean> {\r\n    const showName = !playersSeeName(doc)\r\n\r\n    if (doc instanceof Actor || !doc.actor) await setFlag(doc, 'showName', showName)\r\n    else await setFlag(doc.actor, 'showName', showName)\r\n\r\n    if (canvas.tokens.hud?.rendered) canvas.tokens.hud.render()\r\n\r\n    const actor = doc instanceof Actor ? doc : doc.actor\r\n    if (actor) updateActorTokens(actor, showName)\r\n\r\n    return showName\r\n}\r\n\r\n/**\r\n * @param {Actor | Combatant} doc\r\n * @returns {string} the replacement name with no regard for the current state of visibility\r\n */\r\nexport function getName(doc: Actor | Combatant): string {\r\n    const unknown = localize('unknown')\r\n    const type = doc instanceof Actor ? doc.type : doc.actor?.type\r\n    if (!type) return unknown\r\n\r\n    const saved = (getSavedNames()[type] ?? '').trim()\r\n    return saved || formatUnknown(unknown, type)\r\n}\r\n","export function replaceHTMLText(html: JQuery, regexp: RegExp, replacement: string, addSelf = false) {\r\n    let $nodes = html.find('*')\r\n    if (addSelf) $nodes = $nodes.addBack()\r\n    $nodes.contents().each((_, el) => {\r\n        if (el.nodeType === Node.TEXT_NODE && el.textContent?.trim())\r\n            $(el).replaceWith(el.textContent.replace(regexp, replacement))\r\n    })\r\n}\r\n\r\nexport const fakeEvent = { preventDefault: () => {} }\r\n","import { getSetting } from '@utils/foundry/settings'\r\nimport { replaceHTMLText } from '@utils/jquery'\r\n\r\nexport function dnd5ParseChat({ message, $html, playersCanSee }: ThirdPartyChatParseArgs) {\r\n    if (playersCanSee) return\r\n\r\n    const isGM = game.user.isGM\r\n\r\n    if (message.rolls.length && getSetting('criticals')) {\r\n        const critical = game.i18n.localize('DND5E.CriticalHit')\r\n        const powerful = game.i18n.localize('DND5E.PowerfulCritical')\r\n        const regexp = new RegExp(` (\\\\(([\\\\w ]*)?(?:${critical}|${powerful})([\\\\w ]*)?\\\\))$`, 'igm')\r\n        const $flavor = $html.find('header .flavor-text')\r\n        if (isGM) replaceHTMLText($flavor, regexp, ' <span class=\"anonymous-replaced\">$1</span>', true)\r\n        replaceHTMLText($flavor, regexp, '', true)\r\n    }\r\n}\r\n\r\nexport function dnd5InitHook(isGM: boolean) {}\r\n","import { getSetting, registerSetting } from '@utils/foundry/settings'\r\nimport { getCurrentModule } from '@utils/foundry/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\nimport { warn } from '@utils/foundry/notification'\r\nimport { playersSeeName } from '@src/api'\r\nimport { replaceHTMLText } from '@utils/jquery'\r\n\r\nexport function pf2eInitHook(isGM: boolean) {\r\n    registerSetting({\r\n        name: 'pf2e.traits',\r\n        type: String,\r\n        default: 'never',\r\n        config: true,\r\n        choices: {\r\n            never: getSettingLocalizationPath('pf2e.traits.choices.never'),\r\n            rolls: getSettingLocalizationPath('pf2e.traits.choices.rolls'),\r\n            always: getSettingLocalizationPath('pf2e.traits.choices.always'),\r\n        },\r\n    })\r\n}\r\n\r\n/** @type {ThirdPartyHook} */\r\nexport function pf2eReadyHook(isGM: boolean) {\r\n    if (isGM) disableSettings()\r\n}\r\n\r\nfunction disableSettings() {\r\n    let key = ''\r\n    if (game.settings.settings.has('pf2e.metagame.tokenSetsNameVisibility')) key = 'metagame.tokenSetsNameVisibility'\r\n    else if (game.settings.settings.has('pf2e.metagame_tokenSetsNameVisibility')) key = 'metagame_tokenSetsNameVisibility'\r\n    if (!key || !game.settings.get('pf2e', key)) return\r\n\r\n    const module = getCurrentModule().title\r\n    const setting = game.i18n.localize('PF2E.SETTINGS.Metagame.TokenSetsNameVisibility.Name')\r\n\r\n    game.settings.set('pf2e', key, false)\r\n    warn('pf2e.disabled', { module, setting }, true)\r\n}\r\n\r\nexport function pf2eParseChat({ message, playersCanSee, $html }: ThirdPartyChatParseArgs) {\r\n    const isGM = game.user.isGM\r\n    const target = (message as ChatMessage & { target: { actor: Actor } | null }).target?.actor\r\n    const criticals = getSetting('criticals')\r\n    const rolls = getSetting('rolls')\r\n\r\n    if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n        const $targets = $html.find('.flavor-text .target-dc [data-whose=\"target\"]')\r\n        if ($targets.length) {\r\n            const $target = $targets.first()\r\n            if (isGM) $target.attr('data-visibility', 'gm')\r\n            else $target.remove()\r\n        }\r\n    }\r\n\r\n    if (!isGM && !playersCanSee) {\r\n        const traits = getSetting('pf2e.traits')\r\n\r\n        if (message.rolls.length) {\r\n            if (rolls) {\r\n                const $tags = $html.find('.flavor-text hr + .tags')\r\n\r\n                if ($tags.length) {\r\n                    $tags.prev('hr').remove()\r\n                    $tags.remove()\r\n                }\r\n\r\n                if (criticals) {\r\n                    $html\r\n                        .find('.message-content .dice-roll .dice-result .dice-total')\r\n                        .css('color', 'var(--color-text-dark-primary)')\r\n                }\r\n\r\n                if (traits !== 'never') {\r\n                    $html.find('.flavor-text .tags').remove()\r\n                }\r\n            } else if (traits === 'always') {\r\n                $html.find('.flavor-text .tags').first().remove()\r\n            }\r\n        } else if (traits === 'always') {\r\n            $html.find('.message-content section.tags').remove()\r\n        }\r\n    }\r\n\r\n    if (!playersCanSee && message.rolls.length && rolls && criticals) {\r\n        const critical = game.i18n.localize('PF2E.Check.Result.Degree.Attack.criticalSuccess')\r\n        const hit = game.i18n.localize('PF2E.Check.Result.Degree.Attack.success')\r\n        const regex = new RegExp(`(\\\\((${critical}|${hit})\\\\))`, 'gmi')\r\n        const str = isGM ? '<span class=\"anonymous-replaced\">$1</span>' : ''\r\n        const flavor = $html.find('header .flavor-text')\r\n        replaceHTMLText(flavor, regex, str, true)\r\n    }\r\n}\r\n","import { getName, playersSeeName } from '@src/api'\r\nimport { getSetting } from '@utils/foundry/settings'\r\n\r\nconst SAVE = /\\(dc \\d+\\)/gim\r\n\r\nexport function wireParseChat({ message, playersCanSee, $html }: ThirdPartyChatParseArgs) {\r\n    if (game.user.isGM) return\r\n\r\n    if (!playersCanSee) {\r\n        if (getSetting('rolls')) {\r\n            const $tooltips = $html.find('.dice-tooltip')\r\n            $tooltips.empty()\r\n            $tooltips.css('padding-top', 0)\r\n\r\n            if (getSetting('criticals')) {\r\n                $html.find('.dice-total').removeClass('critical fumble')\r\n            }\r\n\r\n            const $save = $html.find('.phase-saving-throws .phase-heading')\r\n            $save.text($save.text().replace(SAVE, ''))\r\n        }\r\n    }\r\n\r\n    // target\r\n\r\n    const $target = $html.find('.phase-attack .token-info .token-name')\r\n    const targetUUID = message.getFlag('wire', 'activation.attack.targetActorUuid') as ItemUUID | undefined\r\n    if ($target.length && targetUUID) {\r\n        try {\r\n            const target = (fromUuidSync(targetUUID) as TokenDocument | null)?.actor\r\n            if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n                $target.text(getName(target))\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const $targets = $html.find('.phase-saving-throws .saving-throw-target:has(.target-name)')\r\n    const targetsUUID = message.getFlag('wire', 'activation.targetUuids') as ItemUUID[] | undefined\r\n    if ($targets.length && targetsUUID?.length) {\r\n        try {\r\n            for (const uuid of targetsUUID) {\r\n                const target = (fromUuidSync(uuid) as TokenDocument | null)?.actor\r\n                if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n                    $targets.filter(`[data-actor-id=\"${uuid}\"]`).find('.target-name').text(getName(target))\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n}\r\n","import { getModule } from '@utils/foundry/module'\r\nimport { dnd5ParseChat } from './third/dnd5e'\r\nimport { pf2eInitHook, pf2eParseChat, pf2eReadyHook } from './third/pf2e'\r\nimport { wireParseChat } from './third/wire'\r\n\r\nexport const thirdPartyInitHooks = createThirdPartyListener<[isGM: boolean]>()\r\nexport const thirdPartyReadyHooks = createThirdPartyListener<[isGM: boolean]>()\r\nexport const thirdPartyChatParse = createThirdPartyListener<[args: ThirdPartyChatParseArgs]>()\r\n\r\nexport function thirdPartyInitialization() {\r\n    switch (game.system.id) {\r\n        case 'pf2e':\r\n            thirdPartyInitHooks.add(pf2eInitHook)\r\n            thirdPartyReadyHooks.add(pf2eReadyHook)\r\n            thirdPartyChatParse.add(pf2eParseChat)\r\n            break\r\n        case 'dnd5e':\r\n            // thirdPartyInitHooks.add(dnd5InitHook)\r\n            thirdPartyChatParse.add(dnd5ParseChat)\r\n            break\r\n    }\r\n\r\n    if (getModule('wire')?.active) {\r\n        thirdPartyChatParse.add(wireParseChat)\r\n    }\r\n}\r\n\r\nfunction createThirdPartyListener<TArgs extends any[], TFunction extends (...args: TArgs) => void = (...args: TArgs) => void>() {\r\n    const a = [] as TFunction[]\r\n    const f = function (...args: TArgs) {\r\n        a.forEach(x => x(...args))\r\n    }\r\n    f.add = (fn: TFunction) => a.push(fn)\r\n    return f\r\n}\r\n","import { addSelectContextEntry } from '@utils/foundry/context'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { flagsUpdatePath } from '@utils/foundry/path'\r\nimport { playersSeeName, toggleSeeName } from './api'\r\nimport { updateActorTokens } from './token'\r\nimport { refresh } from './utils'\r\n\r\nexport function getActorDirectoryEntryContext(html: JQuery, entries: ContextMenuEntry[]) {\r\n    addSelectContextEntry({\r\n        entries,\r\n        defaultData: {\r\n            name: choice => localize(`context.${choice}`),\r\n            icon: 'fa-solid fa-signature',\r\n            callback: $li => {\r\n                const id = $li.attr('data-document-id') as string\r\n                const actor = game.actors.get(id)\r\n                if (actor) toggleSeeName(actor)\r\n            },\r\n            condition: ($li, choice) => {\r\n                const id = $li.attr('data-document-id') as string\r\n                const actor = game.actors.get(id)\r\n                return !!actor && !actor.hasPlayerOwner && (choice === 'show' ? !playersSeeName(actor) : playersSeeName(actor))\r\n            },\r\n        },\r\n        choices: ['show', 'hide'],\r\n    })\r\n}\r\n\r\nexport function onActorUpdate(actor: Actor, data: Record<string, any>) {\r\n    let needsRefresh = getProperty(data, flagsUpdatePath('showName')) !== undefined\r\n\r\n    if ('ownership' in data) {\r\n        updateActorTokens(actor, actor.hasPlayerOwner)\r\n        needsRefresh = true\r\n    }\r\n\r\n    if (needsRefresh) refresh()\r\n}\r\n","/**\r\n * icons can be classes instead of html element\r\n */\r\nexport function addSelectContextEntry({ entries, choices, defaultData = {} }: ContextSelectEntryOptions) {\r\n    if (Array.isArray(choices)) {\r\n        choices = choices.reduce((acc, curr) => {\r\n            acc[curr] = {}\r\n            return acc\r\n        }, {} as ContextSelectEntryChoices)\r\n    }\r\n\r\n    for (const key in choices) {\r\n        const choice = choices[key]\r\n        const name = choice.name ?? (typeof defaultData.name === 'function' ? defaultData.name(key) : defaultData.name) ?? ''\r\n\r\n        let icon = choice.icon ?? (typeof defaultData.icon === 'function' ? defaultData.icon(key) : defaultData.icon) ?? ''\r\n        if (!$(icon).length) {\r\n            const $icon = $('<i></i>')\r\n            $icon.addClass(icon)\r\n            icon = $icon[0].outerHTML\r\n        }\r\n\r\n        entries.unshift({\r\n            name,\r\n            icon,\r\n            callback: $li => {\r\n                if (choice.callback) choice.callback($li)\r\n                else if (defaultData.callback) defaultData.callback($li, key)\r\n            },\r\n            condition: $li => choice.condition?.($li) ?? defaultData.condition?.($li, key) ?? true,\r\n        })\r\n    }\r\n}\r\n","import { formatUnknown, getSavedNames } from '@src/utils'\r\nimport { localize, subLocalize } from '@utils/foundry/localize'\r\nimport { templatePath } from '@utils/foundry/path'\r\nimport { setSetting } from '@utils/foundry/settings'\r\n\r\nexport class AnonymousNamesMenu extends FormApplication {\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            id: 'anonymous-names-menu',\r\n            title: localize('templates.names.title'),\r\n            template: templatePath('names.html'),\r\n            width: 400,\r\n        })\r\n    }\r\n\r\n    getData(options?: Partial<FormApplicationOptions> | undefined) {\r\n        const unknown = localize('unknown')\r\n        const saved = getSavedNames()\r\n        const types = game.system.documentTypes.Actor.map(x => ({\r\n            type: x,\r\n            value: (saved[x] ?? '').trim(),\r\n            placeholder: formatUnknown(unknown, x),\r\n        }))\r\n        return {\r\n            ...super.getData(options),\r\n            types,\r\n            i18n: subLocalize('templates.names'),\r\n        }\r\n    }\r\n\r\n    activateListeners(html: JQuery) {\r\n        super.activateListeners(html)\r\n        html.find('[data-action=cancel]').on('click', () => this.close())\r\n    }\r\n\r\n    protected async _updateObject(event: Event, formData: Record<string, unknown>) {\r\n        setSetting('names', formData)\r\n    }\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { getCurrentModule } from '@utils/foundry/module'\r\nimport { registerSetting, registerSettingMenu } from '@utils/foundry/settings'\r\nimport { isGM } from '@utils/foundry/user'\r\nimport { getName, playersSeeName, toggleSeeName } from './api'\r\nimport { preCreateToken, renderTokenHUD } from './token'\r\nimport { thirdPartyInitHooks, thirdPartyInitialization, thirdPartyReadyHooks } from './third'\r\nimport { refresh } from './utils'\r\nimport { renderCombatTracker } from './tracker'\r\nimport { renderChatMessage } from './chat'\r\nimport { getActorDirectoryEntryContext, onActorUpdate } from './actor'\r\nimport { AnonymousNamesMenu } from '@apps/names'\r\n\r\nexport const MODULE_ID = 'anonymous'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.once('init', () => {\r\n    registerSetting({\r\n        name: 'version',\r\n        type: String,\r\n        default: '',\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'names',\r\n        type: Object,\r\n        default: {},\r\n        onChange: refresh,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'token',\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'rolls',\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'criticals',\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'cardContent',\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'footer',\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n    })\r\n\r\n    registerSettingMenu({\r\n        name: 'namesMenu',\r\n        type: AnonymousNamesMenu,\r\n    })\r\n\r\n    getCurrentModule<AnonymousApi>().api = {\r\n        playersSeeName,\r\n        toggleSeeName,\r\n        getName,\r\n    }\r\n\r\n    const gm = isGM()\r\n\r\n    if (gm) {\r\n        Hooks.on('getActorDirectoryEntryContext', getActorDirectoryEntryContext)\r\n        Hooks.on('renderTokenHUD', renderTokenHUD)\r\n    }\r\n\r\n    thirdPartyInitialization()\r\n    thirdPartyInitHooks(gm)\r\n})\r\n\r\nHooks.once('ready', () => {\r\n    thirdPartyReadyHooks(game.user.isGM)\r\n})\r\n\r\nHooks.on('renderCombatTracker', renderCombatTracker)\r\nHooks.on('renderChatMessage', renderChatMessage)\r\nHooks.on('preCreateToken', preCreateToken)\r\nHooks.on('updateActor', onActorUpdate)\r\n","export function isFirstGM() {\r\n    if (!game.user.isGM) return false\r\n    const firstGM = game.users.find(user => user.active && user.isGM)\r\n    return game.user === firstGM\r\n}\r\n\r\nexport function getFirstGM() {\r\n    return game.users.find(user => user.active && user.isGM)\r\n}\r\n\r\nexport function isGM() {\r\n    const data = game.data as Game['data'] & { userId: string }\r\n    const user = data.users.find(x => x._id === data.userId)\r\n    return !!user && user.role >= CONST.USER_ROLES.GAMEMASTER\r\n}\r\n\r\nexport function getOwners(doc: FoundryDocument, connected = false) {\r\n    if (connected) return game.users.filter(x => x.active && doc.testUserPermission(x, 'OWNER'))\r\n    return game.users.filter(x => doc.testUserPermission(x, 'OWNER'))\r\n}\r\n\r\nexport function getOwner(doc: FoundryDocument, connected = false) {\r\n    if (connected) return game.users.find(x => x.active && doc.testUserPermission(x, 'OWNER'))\r\n    return game.users.find(x => doc.testUserPermission(x, 'OWNER'))\r\n}\r\n","import { getSameCombatants } from '@utils/foundry/combatant'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { getName, playersSeeName, toggleSeeName } from './api'\r\n\r\nexport function renderCombatTracker(tracker: CombatTracker<Combat>, html: JQuery) {\r\n    const combatants = ui.combat.viewed?.combatants\r\n    if (!combatants || !combatants.size) return\r\n\r\n    html.find('#combat-tracker .combatant').each(function () {\r\n        const id = this.dataset.combatantId as string\r\n        const combatant = combatants.get(id)\r\n        if (!combatant || !combatant.actor || combatant.actor.hasPlayerOwner) return\r\n\r\n        const showName = playersSeeName(combatant)\r\n\r\n        if (game.user.isGM) {\r\n            const controls = this.querySelector('.combatant-controls') as HTMLElement\r\n            const hidden = controls.querySelector('.combatant-control[data-control=\"toggleHidden\"]')\r\n            const toggle = createToggle(showName)\r\n\r\n            toggle.addEventListener('click', event => toggleCombatantName(event, combatant))\r\n\r\n            if (hidden) hidden.after(toggle)\r\n            else controls.appendChild(toggle)\r\n        } else if (!showName) {\r\n            const h4 = this.querySelector('h4') as HTMLElement\r\n            h4.textContent = getName(combatant)\r\n        }\r\n    })\r\n}\r\n\r\nfunction createToggle(active: boolean) {\r\n    const tmp = document.createElement('template')\r\n    const tooltip = active ? 'context.hide' : 'context.show'\r\n\r\n    tmp.innerHTML = `<a\r\n    class=\"combatant-control${active ? ' active' : ''}\"\r\n    data-control=\"toggle-name-visibility\"\r\n    data-tooltip=\"${localize(tooltip)}\"\r\n>\r\n    <i class=\"fa-solid fa-signature\"></i>\r\n</a>`\r\n\r\n    return tmp.content.firstChild as HTMLAnchorElement\r\n}\r\n\r\nfunction toggleCombatantName(event: MouseEvent, combatant: Combatant) {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    if (event.shiftKey && combatant.actor && combatant.actor.isToken && game.combat?.scene) {\r\n        getSameCombatants(combatant).forEach(toggleSeeName)\r\n    } else {\r\n        toggleSeeName(combatant)\r\n    }\r\n}\r\n","export function getSameCombatants(combatant: Combatant) {\r\n    return combatant.combat.turns.filter(x => x.actorId === combatant.actorId)\r\n}\r\n","import { getSetting } from '@utils/foundry/settings'\r\nimport { replaceHTMLText } from '@utils/jquery'\r\nimport { getName, playersSeeName } from './api'\r\nimport { thirdPartyChatParse } from './third'\r\n\r\nconst ESCAPE = /([\"'\\(\\)\\[\\]])/gm\r\n\r\nexport function renderChatMessage(message: ChatMessage, html: JQuery) {\r\n    if (message.blind) return\r\n\r\n    const isGM = game.user.isGM\r\n    const speaker = message.speaker\r\n    const actor = ChatMessage.getSpeakerActor(speaker)\r\n    const playersCanSee = !actor || playersSeeName(actor)\r\n\r\n    if (actor && !playersCanSee) {\r\n        changeNames(message, actor, html)\r\n        if (!isGM) {\r\n            if (message.rolls.length && getSetting('rolls')) {\r\n                const $result = html.find('.message-content .dice-roll .dice-result')\r\n                $result.find('.dice-formula, .dice-tooltip').remove()\r\n                if (getSetting('criticals')) $result.find('.dice-total').removeClass('critical fumble')\r\n            }\r\n            if (getSetting('footer')) html.find('.message-content footer.card-footer').remove()\r\n            if (getSetting('cardContent')) html.find('.message-content .card-content').remove()\r\n        }\r\n    }\r\n\r\n    thirdPartyChatParse({ message, actor, $html: html, playersCanSee })\r\n}\r\n\r\nfunction changeNames(message: ChatMessage, actor: Actor, html: JQuery) {\r\n    const speaker = message.speaker\r\n    const names: Set<string> = new Set()\r\n\r\n    if (speaker.alias) names.add(speaker.alias)\r\n    if (actor.name) names.add(actor.name)\r\n\r\n    if (speaker.token && speaker.scene) {\r\n        const scene = game.scenes.get(speaker.scene)\r\n        const token = scene?.tokens.get(speaker.token)\r\n        if (token?.name) names.add(token.name)\r\n    }\r\n\r\n    if (!names.size) return\r\n\r\n    const escaped = Array.from(names).map(x => RegExp.escape(x))\r\n    const joined = escaped.join('|')\r\n    const regexp = new RegExp(`(${joined})`, 'gmi')\r\n    const renamed = getName(actor)\r\n    const replacement = game.user.isGM ? `<span class=\"anonymous-replaced\" title=\"${renamed}\">$1</span>` : renamed\r\n\r\n    replaceHTMLText(html, regexp, replacement)\r\n}\r\n"],"names":["getModule","id","game","modules","get","getCurrentModule","getSettingLocalizationPath","path","join","templatePath","filter","x","getSetting","key","settings","registerSetting","options","name","scope","config","hint","Array","isArray","choices","reduce","choice","register","setFlag","doc","value","notify","str","arg1","arg2","arg3","type","data","undefined","permanent","ui","notifications","localize","warn","args","i18n","format","subLocalize","subKey","fn","Object","defineProperties","enumerable","configurable","info","error","has","hasLocalization","localizePath","template","hash","updateActorTokens","actor","showName","token","changeDisplayName","linkedOnly","scenes","map","scene","tokens","actorId","actorLink","getActorSceneTokens","flat","getActorTokens","forEach","displayName","isShowing","swap","CONST","TOKEN_DISPLAY_MODES","OWNER_HOVER","HOVER","OWNER","ALWAYS","update","showTokenName","isHidding","swapToHide","hideTokenName","renderTokenHUD","hud","html","object","hasPlayerOwner","toggle","tmp","document","createElement","toggled","playersSeeName","innerHTML","content","firstChild","createToggle","addEventListener","toggleSeeName","find","append","refresh","combat","render","getSavedNames","formatUnknown","unknown","toUpperCase","slice","Combatant","Actor","fallback","getFlag","async","canvas","rendered","getName","trim","replaceHTMLText","regexp","replacement","addSelf","$nodes","addBack","contents","each","_","el","nodeType","Node","TEXT_NODE","textContent","$","replaceWith","replace","dnd5ParseChat","message","$html","playersCanSee","isGM","user","rolls","length","critical","powerful","RegExp","$flavor","pf2eInitHook","String","default","never","always","pf2eReadyHook","module","title","setting","set","disableSettings","pf2eParseChat","target","criticals","$targets","$target","first","attr","remove","traits","$tags","prev","css","hit","regex","SAVE","wireParseChat","$tooltips","empty","removeClass","$save","text","targetUUID","fromUuidSync","console","targetsUUID","uuid","thirdPartyInitHooks","createThirdPartyListener","thirdPartyReadyHooks","thirdPartyChatParse","a","f","add","push","getActorDirectoryEntryContext","entries","defaultData","acc","curr","icon","$icon","addClass","outerHTML","unshift","callback","$li","condition","addSelectContextEntry","actors","AnonymousNamesMenu","FormApplication","defaultOptions","mergeObject","super","width","getData","saved","types","system","documentTypes","placeholder","activateListeners","on","this","close","event","formData","isSystem","setModuleID","Hooks","once","onChange","Boolean","label","restricted","registerMenu","registerSettingMenu","api","gm","users","_id","userId","role","USER_ROLES","GAMEMASTER","active","thirdPartyInitialization","tracker","combatants","viewed","size","dataset","combatantId","combatant","controls","querySelector","hidden","tooltip","preventDefault","stopPropagation","shiftKey","isToken","turns","getSameCombatants","toggleCombatantName","after","appendChild","blind","speaker","ChatMessage","getSpeakerActor","names","Set","alias","joined","from","escape","renamed","changeNames","$result","_source","needsRefresh","getProperty","flagsUpdatePath"],"sourceRoot":""}