{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///./src/utils.ts","webpack:///../../../../foundryVTT-projects/@utils/string.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/notification.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///./src/apps/names.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/flags.ts","webpack:///./src/token.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/actor.ts","webpack:///./src/api.ts","webpack:///./src/actor.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/context.ts","webpack:///../../../../foundryVTT-projects/@utils/jquery.ts","webpack:///./src/third/dnd5e.ts","webpack:///./src/third/pf2e.ts","webpack:///./src/third/wire.ts","webpack:///./src/third.ts","webpack:///./src/main.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/user.ts","webpack:///./src/tracker.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/combatant.ts","webpack:///./src/chat.ts"],"sourcesContent":["export let MODULE_ID = ''\r\nexport let TYPE = 'module'\r\n\r\nexport function setModuleID(id: string, isSystem = false) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n    TYPE = isSystem ? 'system' : 'module'\r\n}\r\n","import { MODULE_ID, TYPE } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `${TYPE}s/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `${TYPE}s/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<TChoices extends Record<string, unknown> | undefined>(\r\n    options: Omit<SettingRegistration<TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown>; name: string }\r\n) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register<TChoices>(MODULE_ID, name, options as SettingRegistration<TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","import { getSetting } from '@utils/foundry/settings'\r\nimport { capitalize } from '@utils/string'\r\n\r\nexport function refresh() {\r\n    ui.combat.render()\r\n}\r\n\r\nexport function getSavedNames() {\r\n    return getSetting('names') as Record<string, string>\r\n}\r\n\r\nexport function formatUnknown(unknown: string, type: string) {\r\n    return `${unknown} ${capitalize(type)}`\r\n}\r\n","export function cleanSplit(str: string | undefined) {\r\n    if (!str) return []\r\n    return str\r\n        .split(',')\r\n        .map(x => x.trim())\r\n        .filter(x => x)\r\n}\r\n\r\nexport function capitalize(str?: string) {\r\n    if (!str) return ''\r\n    return str[0].toUpperCase() + str.slice(1)\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\n\r\nexport type NotifyArgs = [str: string, arg1?: boolean | Record<string, string | number | boolean>, arg2?: boolean]\r\n\r\nfunction notify(\r\n    str: string,\r\n    arg1?: 'warning' | 'info' | 'error' | boolean | Record<string, string | number | boolean>,\r\n    arg2?: boolean | Record<string, string | number | boolean>,\r\n    arg3?: boolean\r\n) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number | boolean>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function localizeTemplate(key: string, { hash }: { hash: Record<string, string> }) {\r\n    return localize(`${key}`, hash)\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: (key: string) => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        template: {\r\n            value: (key: string, { hash }: { hash: Record<string, string> }) => fn(key, hash),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n        path: (key: string) => string\r\n        template: (key: string, options: { hash: Record<string, string> }) => string\r\n    }\r\n}\r\n","import { formatUnknown, getSavedNames } from '@src/utils'\r\nimport { localize, subLocalize } from '@utils/foundry/localize'\r\nimport { templatePath } from '@utils/foundry/path'\r\nimport { setSetting } from '@utils/foundry/settings'\r\n\r\nexport class AnonymousNamesMenu extends FormApplication {\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            id: 'anonymous-names-menu',\r\n            title: localize('templates.names.title'),\r\n            template: templatePath('names.html'),\r\n            width: 400,\r\n        })\r\n    }\r\n\r\n    getData(options?: Partial<FormApplicationOptions> | undefined) {\r\n        const unknown = localize('unknown')\r\n        const saved = getSavedNames()\r\n        const types = game.system.documentTypes.Actor.map(x => ({\r\n            type: x,\r\n            value: (saved[x] ?? '').trim(),\r\n            placeholder: formatUnknown(unknown, x),\r\n        }))\r\n        return {\r\n            ...super.getData(options),\r\n            types,\r\n            i18n: subLocalize('templates.names'),\r\n        }\r\n    }\r\n\r\n    activateListeners(html: JQuery) {\r\n        super.activateListeners(html)\r\n        html.find('[data-action=cancel]').on('click', () => this.close())\r\n    }\r\n\r\n    protected async _updateObject(event: Event, formData: Record<string, unknown>) {\r\n        setSetting('names', formData)\r\n    }\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\ntype OwnModule = 'anonymous' | 'idleuh' | 'pf2e-hero-actions' | 'pf2e-dailies'\r\n\r\ntype ReturnedModule<TApi extends ModuleApi = ModuleApi> = Module<TApi> | undefined\r\ntype ReturnedModuleApi<TApi extends Record<string, any>> = Module<TApi>['api'] | undefined\r\n\r\nexport function getModule<T extends ModuleApi = ModuleApi>(id: string | OwnModule) {\r\n    return game.modules.get(id) as ReturnedModule<T>\r\n}\r\n\r\nexport function getCurrentModule<TApi extends ModuleApi = ModuleApi>() {\r\n    return getModule(MODULE_ID) as Module<TApi>\r\n}\r\n\r\nexport function getModuleApi<TApi extends Record<string, any>>(id: string | OwnModule) {\r\n    return getModule<TApi>(id)?.api as ReturnedModuleApi<TApi>\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function hasModuleFlag(doc: FoundryDocument) {\r\n    return getProperty(doc, `flags.${MODULE_ID}`) !== undefined\r\n}\r\n\r\nexport function flagPath(key: string) {\r\n    return `flags.${MODULE_ID}.key`\r\n}\r\n\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string): T | undefined\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string, fallback: T): T\r\nexport function getFlag<T extends unknown>(doc: FoundryDocument, key: string, fallback?: T): T | undefined {\r\n    return (doc.getFlag(MODULE_ID, key) as T | undefined) ?? fallback\r\n}\r\n\r\n/**\r\n * @template {foundry.Document} T\r\n * @param {T} doc\r\n * @param {string} key\r\n * @param {any} value\r\n * @returns T\r\n */\r\nexport function setFlag(doc: FoundryDocument, key: string, value: unknown) {\r\n    return doc.setFlag(MODULE_ID, key, value)\r\n}\r\n\r\nexport function getSourceId(doc: ClientDocumentMixin) {\r\n    return doc.getFlag<ItemUUID>('core', 'sourceId')\r\n}\r\n\r\nexport function hasSourceId(doc: ClientDocumentMixin, sourceId: DocumentUUID) {\r\n    return getSourceId(doc) === sourceId\r\n}\r\n\r\nexport function includesSourceId(doc: ClientDocumentMixin, list: DocumentUUID[]) {\r\n    const sourceId = getSourceId(doc)\r\n    return sourceId ? list.includes(sourceId) : false\r\n}\r\n","import { getActorTokens } from '@utils/foundry/actor'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { getSetting } from '@utils/foundry/settings'\r\nimport { playersSeeName, toggleSeeName } from './api'\r\n\r\nexport function updateActorTokens(actor: Actor, showName: boolean) {\r\n    if (actor.token) changeDisplayName(actor.token, showName)\r\n    else getActorTokens(actor, true).forEach(x => changeDisplayName(x, showName))\r\n}\r\n\r\nfunction changeDisplayName(token: TokenDocument, showName: boolean) {\r\n    if (showName) showTokenName(token)\r\n    else hideTokenName(token)\r\n}\r\n\r\nfunction isHidding(displayName: TokenDisplayMode) {\r\n    return !isShowing(displayName)\r\n}\r\n\r\nfunction isShowing(displayName: TokenDisplayMode) {\r\n    return displayName === CONST.TOKEN_DISPLAY_MODES.HOVER || displayName === CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n}\r\n\r\nfunction swapToHide(displayName: TokenDisplayMode) {\r\n    if (displayName === CONST.TOKEN_DISPLAY_MODES.HOVER) return CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER\r\n    if (displayName === CONST.TOKEN_DISPLAY_MODES.ALWAYS) return CONST.TOKEN_DISPLAY_MODES.OWNER\r\n    return displayName\r\n}\r\n\r\nfunction hideTokenName(token: TokenDocument) {\r\n    const displayName = token.displayName\r\n    if (isHidding(displayName)) return\r\n    const swap = swapToHide(displayName)\r\n    token.update({ displayName: swap })\r\n}\r\n\r\nfunction showTokenName(token: TokenDocument) {\r\n    const displayName = token.displayName\r\n    if (isShowing(displayName) || !getSetting('token')) return\r\n\r\n    let swap = displayName\r\n    if (swap === CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER) swap = CONST.TOKEN_DISPLAY_MODES.HOVER\r\n    else if (swap === CONST.TOKEN_DISPLAY_MODES.OWNER) swap = CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n\r\n    token.update({ displayName: swap })\r\n}\r\n\r\nexport function renderTokenHUD(hud: TokenHUD, html: JQuery) {\r\n    const actor = hud.object.actor\r\n    if (!actor || actor.hasPlayerOwner) return\r\n\r\n    const toggle = createToggle(actor)\r\n    toggle.addEventListener('click', () => toggleSeeName(actor))\r\n    html.find('.col.right').append(toggle)\r\n}\r\n\r\nfunction createToggle(actor: Actor) {\r\n    const tmp = document.createElement('template')\r\n    const toggled = playersSeeName(actor)\r\n\r\n    tmp.innerHTML = `<div class=\"control-icon${toggled ? ' active' : ''}\" data-action=\"anonymous-toggle\">\r\n    <i class=\"fa-solid fa-signature\" title=\"${localize('hud.title')}\"></i>\r\n</div>`\r\n\r\n    return tmp.content.firstChild as HTMLDivElement\r\n}\r\n\r\nexport function preCreateToken(token: TokenDocument) {\r\n    if (token.actor?.hasPlayerOwner) return\r\n    const displayName = token.displayName\r\n    const swap = swapToHide(displayName)\r\n    if (swap !== displayName) token._source.displayName = swap\r\n}\r\n","export function getCharacterOwner(actor: Actor, connected = false) {\r\n    if (connected) return game.users.find(x => x.active && x.character === actor)\r\n    return game.users.find(x => x.character === actor)\r\n}\r\n\r\nexport function getActorTokens(actor: Actor, linkedOnly = false) {\r\n    return game.scenes.map(scene => getActorSceneTokens(scene, actor, linkedOnly)).flat()\r\n}\r\n\r\nexport function getActorSceneTokens(scene: Scene, actor: Actor, linkedOnly = false) {\r\n    return scene.tokens.filter(token => token.actorId === actor.id && (!linkedOnly || token.actorLink))\r\n}\r\n","import { getFlag, setFlag } from '@utils/foundry/flags'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { updateActorTokens } from './token'\r\nimport { formatUnknown, getSavedNames } from './utils'\r\n\r\n/**\r\n * @param {Actor | Combatant} doc\r\n * @returns {boolean} the current state of visibility\r\n */\r\nexport function playersSeeName(doc: Actor | Combatant): boolean {\r\n    if (doc instanceof Combatant && doc.actor) doc = doc.actor\r\n    if (doc instanceof Actor && doc.hasPlayerOwner) return true\r\n    return !!getFlag(doc, 'showName')\r\n}\r\n\r\n/**\r\n * Toggles the state of visibility\r\n * This will trigger a refresh of different parts of the UI to reflect the new state\r\n *\r\n * @param {Actor | Combatant} doc\r\n * @returns {Promise<boolean>} a promise with the new state of visibility\r\n */\r\nexport async function toggleSeeName(doc: Actor | Combatant): Promise<boolean> {\r\n    const showName = !playersSeeName(doc)\r\n\r\n    if (doc instanceof Actor || !doc.actor) await setFlag(doc, 'showName', showName)\r\n    else await setFlag(doc.actor, 'showName', showName)\r\n\r\n    if (canvas.tokens.hud?.rendered) canvas.tokens.hud.render()\r\n\r\n    const actor = doc instanceof Actor ? doc : doc.actor\r\n    if (actor) updateActorTokens(actor, showName)\r\n\r\n    return showName\r\n}\r\n\r\n/**\r\n * @param {Actor | Combatant} doc\r\n * @returns {string} the replacement name with no regard for the current state of visibility\r\n */\r\nexport function getName(doc: Actor | Combatant): string {\r\n    const unknown = localize('unknown')\r\n    const type = doc instanceof Actor ? doc.type : doc.actor?.type\r\n    if (!type) return unknown\r\n\r\n    const saved = (getSavedNames()[type] ?? '').trim()\r\n    return saved || formatUnknown(unknown, type)\r\n}\r\n","import { addSelectContextEntry } from '@utils/foundry/context'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { flagsUpdatePath } from '@utils/foundry/path'\r\nimport { playersSeeName, toggleSeeName } from './api'\r\nimport { updateActorTokens } from './token'\r\nimport { refresh } from './utils'\r\n\r\nexport function getActorDirectoryEntryContext(html: JQuery, entries: ContextMenuEntry[]) {\r\n    addSelectContextEntry({\r\n        entries,\r\n        defaultData: {\r\n            name: choice => localize(`context.${choice}`),\r\n            icon: 'fa-solid fa-signature',\r\n            callback: $li => {\r\n                const id = $li.attr('data-document-id') as string\r\n                const actor = game.actors.get(id)\r\n                if (actor) toggleSeeName(actor)\r\n            },\r\n            condition: ($li, choice) => {\r\n                const id = $li.attr('data-document-id') as string\r\n                const actor = game.actors.get(id)\r\n                return !!actor && !actor.hasPlayerOwner && (choice === 'show' ? !playersSeeName(actor) : playersSeeName(actor))\r\n            },\r\n        },\r\n        choices: ['show', 'hide'],\r\n    })\r\n}\r\n\r\nexport function onActorUpdate(actor: Actor, data: Record<string, any>) {\r\n    let needsRefresh = getProperty(data, flagsUpdatePath('showName')) !== undefined\r\n\r\n    if ('ownership' in data) {\r\n        updateActorTokens(actor, actor.hasPlayerOwner)\r\n        needsRefresh = true\r\n    }\r\n\r\n    if (needsRefresh) refresh()\r\n}\r\n","/**\r\n * icons can be classes instead of html element\r\n */\r\nexport function addSelectContextEntry({ entries, choices, defaultData = {} }: ContextSelectEntryOptions) {\r\n    if (Array.isArray(choices)) {\r\n        choices = choices.reduce((acc, curr) => {\r\n            acc[curr] = {}\r\n            return acc\r\n        }, {} as ContextSelectEntryChoices)\r\n    }\r\n\r\n    for (const key in choices) {\r\n        const choice = choices[key]\r\n        const name = choice.name ?? (typeof defaultData.name === 'function' ? defaultData.name(key) : defaultData.name) ?? ''\r\n\r\n        let icon = choice.icon ?? (typeof defaultData.icon === 'function' ? defaultData.icon(key) : defaultData.icon) ?? ''\r\n        if (!$(icon).length) {\r\n            const $icon = $('<i></i>')\r\n            $icon.addClass(icon)\r\n            icon = $icon[0].outerHTML\r\n        }\r\n\r\n        entries.unshift({\r\n            name,\r\n            icon,\r\n            callback: $li => {\r\n                if (choice.callback) choice.callback($li)\r\n                else if (defaultData.callback) defaultData.callback($li, key)\r\n            },\r\n            condition: $li => choice.condition?.($li) ?? defaultData.condition?.($li, key) ?? true,\r\n        })\r\n    }\r\n}\r\n","export function replaceHTMLText(html: JQuery, regexp: RegExp, replacement: string, addSelf = false) {\r\n    let $nodes = html.find('*')\r\n    if (addSelf) $nodes = $nodes.addBack()\r\n    $nodes.contents().each((_, el) => {\r\n        if (el.nodeType === Node.TEXT_NODE && el.textContent?.trim())\r\n            $(el).replaceWith(el.textContent.replace(regexp, replacement))\r\n    })\r\n}\r\n\r\nexport const fakeEvent = { preventDefault: () => {} }\r\n","import { getSetting } from '@utils/foundry/settings'\r\nimport { replaceHTMLText } from '@utils/jquery'\r\n\r\nexport function dnd5ParseChat({ message, $html, isAnonymous, actor }: ThirdPartyChatParseArgs) {\r\n    if (!isAnonymous) return\r\n\r\n    if (message.rolls.length && getSetting('criticals')) {\r\n        const critical = game.i18n.localize('DND5E.CriticalHit')\r\n        const powerful = game.i18n.localize('DND5E.PowerfulCritical')\r\n        const regexp = new RegExp(` (\\\\(([\\\\w ]*)?(?:${critical}|${powerful})([\\\\w ]*)?\\\\))$`, 'igm')\r\n        const $flavor = $html.find('header .flavor-text')\r\n        if (game.user.isGM) replaceHTMLText($flavor, regexp, ' <span class=\"anonymous-replaced\">$1</span>', true)\r\n        replaceHTMLText($flavor, regexp, '', true)\r\n    }\r\n}\r\n\r\nexport function dnd5InitHook(isGM: boolean) {}\r\n","import { getSetting, registerSetting } from '@utils/foundry/settings'\r\nimport { getCurrentModule } from '@utils/foundry/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\nimport { warn } from '@utils/foundry/notification'\r\nimport { getName, playersSeeName } from '@src/api'\r\nimport { replaceHTMLText } from '@utils/jquery'\r\nimport { localize } from '@utils/foundry/localize'\r\n\r\nexport function pf2eInitHook(isGM: boolean) {\r\n    registerSetting({\r\n        name: 'pf2e.traits',\r\n        type: String,\r\n        default: 'never',\r\n        config: true,\r\n        choices: {\r\n            never: getSettingLocalizationPath('pf2e.traits.choices.never'),\r\n            rolls: getSettingLocalizationPath('pf2e.traits.choices.rolls'),\r\n            always: getSettingLocalizationPath('pf2e.traits.choices.always'),\r\n        },\r\n    })\r\n}\r\n\r\n/** @type {ThirdPartyHook} */\r\nexport function pf2eReadyHook(isGM: boolean) {\r\n    if (isGM) disableSettings()\r\n}\r\n\r\nfunction disableSettings() {\r\n    let key = ''\r\n    if (game.settings.settings.has('pf2e.metagame.tokenSetsNameVisibility')) key = 'metagame.tokenSetsNameVisibility'\r\n    else if (game.settings.settings.has('pf2e.metagame_tokenSetsNameVisibility')) key = 'metagame_tokenSetsNameVisibility'\r\n    if (!key || !game.settings.get('pf2e', key)) return\r\n\r\n    const module = getCurrentModule().title\r\n    const setting = game.i18n.localize('PF2E.SETTINGS.Metagame.TokenSetsNameVisibility.Name')\r\n\r\n    game.settings.set('pf2e', key, false)\r\n    warn('pf2e.disabled', { module, setting }, true)\r\n}\r\n\r\nexport function pf2eParseChat({ message, isAnonymous, $html }: ThirdPartyChatParseArgs) {\r\n    const isGM = game.user.isGM\r\n    const target = (message as ChatMessage & { target: { actor: Actor } | null }).target?.actor\r\n    const criticals = getSetting('criticals')\r\n    const rolls = getSetting('rolls')\r\n\r\n    if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n        const $targets = $html.find('.flavor-text .target-dc [data-whose=\"target\"]')\r\n        if ($targets.length) {\r\n            const $target = $targets.first()\r\n            if (isGM) $target.attr('data-visibility', 'gm')\r\n            else $target.text(localize('pf2e.target', { name: getName(target) }))\r\n        }\r\n    }\r\n\r\n    if (!isGM && isAnonymous) {\r\n        const traits = getSetting('pf2e.traits')\r\n\r\n        if (message.rolls.length) {\r\n            if (rolls) {\r\n                const $tags = $html.find('.flavor-text hr + .tags')\r\n\r\n                if ($tags.length) {\r\n                    $tags.prev('hr').remove()\r\n                    $tags.remove()\r\n                }\r\n\r\n                if (criticals) {\r\n                    $html\r\n                        .find('.message-content .dice-roll .dice-result .dice-total')\r\n                        .css('color', 'var(--color-text-dark-primary)')\r\n                }\r\n\r\n                if (traits !== 'never') {\r\n                    $html.find('.flavor-text .tags').remove()\r\n                }\r\n            } else if (traits === 'always') {\r\n                $html.find('.flavor-text .tags').first().remove()\r\n            }\r\n        } else if (traits === 'always') {\r\n            $html.find('.message-content section.tags').remove()\r\n        }\r\n    }\r\n\r\n    if (isAnonymous && message.rolls.length && rolls && criticals) {\r\n        const critical = game.i18n.localize('PF2E.Check.Result.Degree.Attack.criticalSuccess')\r\n        const hit = game.i18n.localize('PF2E.Check.Result.Degree.Attack.success')\r\n        const regex = new RegExp(`(\\\\((${critical}|${hit})\\\\))`, 'gmi')\r\n        const str = isGM ? '<span class=\"anonymous-replaced\">$1</span>' : ''\r\n        const flavor = $html.find('header .flavor-text')\r\n        replaceHTMLText(flavor, regex, str, true)\r\n    }\r\n}\r\n","import { getName, playersSeeName } from '@src/api'\r\nimport { getSetting } from '@utils/foundry/settings'\r\n\r\nconst SAVE = /\\(dc \\d+\\)/gim\r\n\r\nexport function wireParseChat({ message, isAnonymous, $html }: ThirdPartyChatParseArgs) {\r\n    if (game.user.isGM) return\r\n\r\n    if (isAnonymous) {\r\n        if (getSetting('rolls')) {\r\n            const $tooltips = $html.find('.dice-tooltip')\r\n            $tooltips.empty()\r\n            $tooltips.css('padding-top', 0)\r\n\r\n            if (getSetting('criticals')) {\r\n                $html.find('.dice-total').removeClass('critical fumble')\r\n            }\r\n\r\n            const $save = $html.find('.phase-saving-throws .phase-heading')\r\n            $save.text($save.text().replace(SAVE, ''))\r\n        }\r\n    }\r\n\r\n    // target\r\n\r\n    const $target = $html.find('.phase-attack .token-info .token-name')\r\n    const targetUUID = message.getFlag('wire', 'activation.attack.targetActorUuid') as ItemUUID | undefined\r\n    if ($target.length && targetUUID) {\r\n        try {\r\n            const target = (fromUuidSync(targetUUID) as TokenDocument | null)?.actor\r\n            if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n                $target.text(getName(target))\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    const $targets = $html.find('.phase-saving-throws .saving-throw-target:has(.target-name)')\r\n    const targetsUUID = message.getFlag('wire', 'activation.targetUuids') as ItemUUID[] | undefined\r\n    if ($targets.length && targetsUUID?.length) {\r\n        try {\r\n            for (const uuid of targetsUUID) {\r\n                const target = (fromUuidSync(uuid) as TokenDocument | null)?.actor\r\n                if (target && !target.hasPlayerOwner && !playersSeeName(target)) {\r\n                    $targets.filter(`[data-actor-id=\"${uuid}\"]`).find('.target-name').text(getName(target))\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n}\r\n","import { getModule } from '@utils/foundry/module'\r\nimport { dnd5ParseChat } from './third/dnd5e'\r\nimport { pf2eInitHook, pf2eParseChat, pf2eReadyHook } from './third/pf2e'\r\nimport { wireParseChat } from './third/wire'\r\n\r\nexport const thirdPartyInitHooks = createThirdPartyListener<[isGM: boolean]>()\r\nexport const thirdPartyReadyHooks = createThirdPartyListener<[isGM: boolean]>()\r\nexport const thirdPartyChatParse = createThirdPartyListener<[args: ThirdPartyChatParseArgs]>()\r\n\r\nexport function thirdPartyInitialization() {\r\n    switch (game.system.id) {\r\n        case 'pf2e':\r\n            thirdPartyInitHooks.add(pf2eInitHook)\r\n            thirdPartyReadyHooks.add(pf2eReadyHook)\r\n            thirdPartyChatParse.add(pf2eParseChat)\r\n            break\r\n        case 'dnd5e':\r\n            // thirdPartyInitHooks.add(dnd5InitHook)\r\n            thirdPartyChatParse.add(dnd5ParseChat)\r\n            break\r\n    }\r\n\r\n    if (getModule('wire')?.active) {\r\n        thirdPartyChatParse.add(wireParseChat)\r\n    }\r\n}\r\n\r\nfunction createThirdPartyListener<TArgs extends any[], TFunction extends (...args: TArgs) => void = (...args: TArgs) => void>() {\r\n    const a = [] as TFunction[]\r\n    const f = function (...args: TArgs) {\r\n        a.forEach(x => x(...args))\r\n    }\r\n    f.add = (fn: TFunction) => a.push(fn)\r\n    return f\r\n}\r\n","import { AnonymousNamesMenu } from '@apps/names'\r\nimport { getCurrentModule } from '@utils/foundry/module'\r\nimport { registerSetting, registerSettingMenu } from '@utils/foundry/settings'\r\nimport { isGM } from '@utils/foundry/user'\r\nimport { setModuleID } from '@utils/module'\r\nimport { getActorDirectoryEntryContext, onActorUpdate } from './actor'\r\nimport { getName, playersSeeName, toggleSeeName } from './api'\r\nimport { renderChatMessage } from './chat'\r\nimport { thirdPartyInitHooks, thirdPartyInitialization, thirdPartyReadyHooks } from './third'\r\nimport { preCreateToken, renderTokenHUD } from './token'\r\nimport { renderCombatTracker } from './tracker'\r\nimport { refresh } from './utils'\r\n\r\nexport const MODULE_ID = 'anonymous'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.once('init', () => {\r\n    registerSetting({\r\n        name: 'version',\r\n        type: String,\r\n        default: '',\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'names',\r\n        type: Object,\r\n        default: {},\r\n        onChange: refresh,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'token',\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'rolls',\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'criticals',\r\n        type: Boolean,\r\n        default: true,\r\n        config: true,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'cardContent',\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'footer',\r\n        type: Boolean,\r\n        default: false,\r\n        config: true,\r\n    })\r\n\r\n    registerSettingMenu({\r\n        name: 'namesMenu',\r\n        type: AnonymousNamesMenu,\r\n    })\r\n\r\n    getCurrentModule<AnonymousApi>().api = {\r\n        playersSeeName,\r\n        toggleSeeName,\r\n        getName,\r\n    }\r\n\r\n    const gm = isGM()\r\n\r\n    if (gm) {\r\n        Hooks.on('getActorDirectoryEntryContext', getActorDirectoryEntryContext)\r\n        Hooks.on('renderTokenHUD', renderTokenHUD)\r\n    }\r\n\r\n    thirdPartyInitialization()\r\n    thirdPartyInitHooks(gm)\r\n})\r\n\r\nHooks.once('ready', () => {\r\n    thirdPartyReadyHooks(game.user.isGM)\r\n})\r\n\r\nHooks.on('renderCombatTracker', renderCombatTracker)\r\nHooks.on('renderChatMessage', renderChatMessage)\r\nHooks.on('preCreateToken', preCreateToken)\r\nHooks.on('updateActor', onActorUpdate)\r\n","export function isFirstGM() {\r\n    if (!game.user.isGM) return false\r\n    const firstGM = game.users.find(user => user.active && user.isGM)\r\n    return game.user === firstGM\r\n}\r\n\r\nexport function getFirstGM() {\r\n    return game.users.find(user => user.active && user.isGM)\r\n}\r\n\r\nexport function isGM() {\r\n    const data = game.data as Game['data'] & { userId: string }\r\n    const user = data.users.find(x => x._id === data.userId)\r\n    return !!user && user.role >= CONST.USER_ROLES.GAMEMASTER\r\n}\r\n\r\nexport function getOwners(doc: FoundryDocument, connected = false) {\r\n    if (connected) return game.users.filter(x => x.active && doc.testUserPermission(x, 'OWNER'))\r\n    return game.users.filter(x => doc.testUserPermission(x, 'OWNER'))\r\n}\r\n\r\nexport function getOwner(doc: FoundryDocument, connected = false) {\r\n    if (connected) return game.users.find(x => x.active && doc.testUserPermission(x, 'OWNER'))\r\n    return game.users.find(x => doc.testUserPermission(x, 'OWNER'))\r\n}\r\n","import { getSameCombatants } from '@utils/foundry/combatant'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { getName, playersSeeName, toggleSeeName } from './api'\r\n\r\nexport function renderCombatTracker(tracker: CombatTracker<Combat>, html: JQuery) {\r\n    const combatants = ui.combat.viewed?.combatants\r\n    if (!combatants || !combatants.size) return\r\n\r\n    html.find('#combat-tracker .combatant').each(function () {\r\n        const id = this.dataset.combatantId as string\r\n        const combatant = combatants.get(id)\r\n        if (!combatant || !combatant.actor || combatant.actor.hasPlayerOwner) return\r\n\r\n        const showName = playersSeeName(combatant)\r\n\r\n        if (game.user.isGM) {\r\n            const controls = this.querySelector('.combatant-controls') as HTMLElement\r\n            const hidden = controls.querySelector('.combatant-control[data-control=\"toggleHidden\"]')\r\n            const toggle = createToggle(showName)\r\n\r\n            toggle.addEventListener('click', event => toggleCombatantName(event, combatant))\r\n\r\n            if (hidden) hidden.after(toggle)\r\n            else controls.appendChild(toggle)\r\n        } else if (!showName) {\r\n            const h4 = this.querySelector('h4') as HTMLElement\r\n            h4.textContent = getName(combatant)\r\n        }\r\n    })\r\n}\r\n\r\nfunction createToggle(active: boolean) {\r\n    const tmp = document.createElement('template')\r\n    const tooltip = active ? 'context.hide' : 'context.show'\r\n\r\n    tmp.innerHTML = `<a\r\n    class=\"combatant-control${active ? ' active' : ''}\"\r\n    data-control=\"toggle-name-visibility\"\r\n    data-tooltip=\"${localize(tooltip)}\"\r\n>\r\n    <i class=\"fa-solid fa-signature\"></i>\r\n</a>`\r\n\r\n    return tmp.content.firstChild as HTMLAnchorElement\r\n}\r\n\r\nfunction toggleCombatantName(event: MouseEvent, combatant: Combatant) {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    if (event.shiftKey && combatant.actor && combatant.actor.isToken && game.combat?.scene) {\r\n        getSameCombatants(combatant).forEach(toggleSeeName)\r\n    } else {\r\n        toggleSeeName(combatant)\r\n    }\r\n}\r\n","export function getSameCombatants(combatant: Combatant) {\r\n    return combatant.combat.turns.filter(x => x.actorId === combatant.actorId)\r\n}\r\n","import { getSetting } from '@utils/foundry/settings'\r\nimport { replaceHTMLText } from '@utils/jquery'\r\nimport { getName, playersSeeName } from './api'\r\nimport { thirdPartyChatParse } from './third'\r\n\r\nexport function renderChatMessage(message: ChatMessage, html: JQuery) {\r\n    if (message.blind) return\r\n\r\n    const isGM = game.user.isGM\r\n    const speaker = message.speaker\r\n    const actor = ChatMessage.getSpeakerActor(speaker)\r\n    const playersCanSee = !actor || playersSeeName(actor)\r\n    const isAnonymous = !!actor && !actor.hasPlayerOwner\r\n\r\n    if (actor && !playersCanSee) changeNames(message, actor, html)\r\n\r\n    if (!isGM && isAnonymous) {\r\n        if (message.rolls.length && getSetting('rolls')) {\r\n            const $result = html.find('.message-content .dice-roll .dice-result')\r\n            $result.find('.dice-formula, .dice-tooltip').remove()\r\n            if (getSetting('criticals')) $result.find('.dice-total').removeClass('critical fumble')\r\n        }\r\n        if (getSetting('footer')) html.find('.message-content footer.card-footer').remove()\r\n        if (getSetting('cardContent')) html.find('.message-content .card-content').remove()\r\n    }\r\n\r\n    thirdPartyChatParse({ message, actor, $html: html, playersCanSee, isAnonymous })\r\n}\r\n\r\nfunction changeNames(message: ChatMessage, actor: Actor, html: JQuery) {\r\n    const speaker = message.speaker\r\n    const names: Set<string> = new Set()\r\n\r\n    if (speaker.alias) names.add(speaker.alias)\r\n    if (actor.name) names.add(actor.name)\r\n\r\n    if (speaker.token && speaker.scene) {\r\n        const scene = game.scenes.get(speaker.scene)\r\n        const token = scene?.tokens.get(speaker.token)\r\n        if (token?.name) names.add(token.name)\r\n    }\r\n\r\n    if (!names.size) return\r\n\r\n    const escaped = Array.from(names).map(x => RegExp.escape(x))\r\n    const joined = escaped.join('|')\r\n    const regexp = new RegExp(`(${joined})`, 'gmi')\r\n    const renamed = getName(actor)\r\n    const replacement = game.user.isGM ? `<span class=\"anonymous-replaced\" title=\"${renamed}\">$1</span>` : renamed\r\n\r\n    replaceHTMLText(html, regexp, replacement)\r\n}\r\n"],"names":["getSettingLocalizationPath","path","join","templatePath","filter","x","getSetting","key","game","settings","get","registerSetting","options","name","scope","config","hint","Array","isArray","choices","reduce","choice","register","refresh","ui","combat","render","getSavedNames","formatUnknown","unknown","type","str","toUpperCase","slice","notify","arg1","arg2","arg3","data","undefined","permanent","notifications","localize","warn","args","i18n","format","subLocalize","subKey","fn","Object","defineProperties","value","enumerable","configurable","info","error","has","hasLocalization","localizePath","template","hash","AnonymousNamesMenu","FormApplication","defaultOptions","mergeObject","super","id","title","width","getData","saved","types","system","documentTypes","Actor","map","trim","placeholder","activateListeners","html","find","on","this","close","async","event","formData","set","getModule","modules","getCurrentModule","setFlag","doc","updateActorTokens","actor","showName","token","changeDisplayName","linkedOnly","scenes","scene","tokens","actorId","actorLink","getActorSceneTokens","flat","getActorTokens","forEach","displayName","isShowing","swap","CONST","TOKEN_DISPLAY_MODES","OWNER_HOVER","HOVER","OWNER","ALWAYS","update","showTokenName","isHidding","swapToHide","hideTokenName","renderTokenHUD","hud","object","hasPlayerOwner","toggle","tmp","document","createElement","toggled","playersSeeName","innerHTML","content","firstChild","createToggle","addEventListener","toggleSeeName","append","Combatant","fallback","getFlag","canvas","rendered","getName","getActorDirectoryEntryContext","entries","defaultData","acc","curr","icon","$","length","$icon","addClass","outerHTML","unshift","callback","$li","condition","addSelectContextEntry","attr","actors","replaceHTMLText","regexp","replacement","addSelf","$nodes","addBack","contents","each","_","el","nodeType","Node","TEXT_NODE","textContent","replaceWith","replace","dnd5ParseChat","message","$html","isAnonymous","rolls","critical","powerful","RegExp","$flavor","user","isGM","pf2eInitHook","String","default","never","always","pf2eReadyHook","module","setting","disableSettings","pf2eParseChat","target","criticals","$targets","$target","first","text","traits","$tags","prev","remove","css","hit","regex","SAVE","wireParseChat","$tooltips","empty","removeClass","$save","targetUUID","fromUuidSync","console","targetsUUID","uuid","thirdPartyInitHooks","createThirdPartyListener","thirdPartyReadyHooks","thirdPartyChatParse","a","f","add","push","isSystem","setModuleID","Hooks","once","onChange","Boolean","label","restricted","registerMenu","registerSettingMenu","api","gm","users","_id","userId","role","USER_ROLES","GAMEMASTER","active","thirdPartyInitialization","tracker","combatants","viewed","size","dataset","combatantId","combatant","controls","querySelector","hidden","tooltip","preventDefault","stopPropagation","shiftKey","isToken","turns","getSameCombatants","toggleCombatantName","after","appendChild","blind","speaker","ChatMessage","getSpeakerActor","playersCanSee","names","Set","alias","joined","from","escape","renamed","changeNames","$result","_source","needsRefresh","getProperty","flagsUpdatePath"],"sourceRoot":""}